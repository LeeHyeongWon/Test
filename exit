[33mcommit bb8d503178a7c15715ed9aacc58cbfa4e4c2dd84[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: Hyeongwon Lee (이형원) <hyeongwon.lee@bespinglobal.com>
Date:   Fri Jan 25 16:39:17 2019 +0900

    안녕하세요

[1mdiff --git a/github.md b/github.md[m
[1mindex 67ce71e..1305ec7 100644[m
[1m--- a/github.md[m
[1m+++ b/github.md[m
[36m@@ -4,7 +4,7 @@[m
 [m
 - <https://git-scm.com/>[m
 [m
[31m-[m
[32m+[m[32mㅏㅣㅁ너ㅣㅏ머닝미나어[m
 [m
 ### 저장소 만들기[m
 [m

[33mcommit 7ea59ec12c1c7686d4da7db9d09d208005b3d680[m
Author: Hyeongwon Lee (이형원) <hyeongwon.lee@bespinglobal.com>
Date:   Fri Jan 25 16:37:50 2019 +0900

    안녕하세요

[1mdiff --git a/github.md b/github.md[m
[1mnew file mode 100644[m
[1mindex 0000000..67ce71e[m
[1m--- /dev/null[m
[1m+++ b/github.md[m
[36m@@ -0,0 +1,98 @@[m
[32m+[m[32m# github[m
[32m+[m
[32m+[m[32m### 설치주소[m
[32m+[m
[32m+[m[32m- <https://git-scm.com/>[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### 저장소 만들기[m
[32m+[m
[32m+[m[32m```mkdir github``` 디렉토리 생성[m
[32m+[m
[32m+[m[32m```cd github``` 디렉토리 들어가기[m
[32m+[m
[32m+[m[32m```git init``` git의 저장소로 만들기[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### git이 관리할 대상으로 파일 등록[m
[32m+[m
[32m+[m[32m```vim f1.txt``` 파일 생성[m
[32m+[m
[32m+[m[32m```git add f1.txt``` git이 파일 추적[m
[32m+[m
[32m+[m[32m```git status``` 현재 디렉토리 상태 확인[m
[32m+[m
[32m+[m[32m※ 변경할 때 마다 add를 해줘야 한다[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### 버전 만들기[m
[32m+[m
[32m+[m[32m```git config --global user.name 닉네임``` 버전에 이름 등록[m
[32m+[m
[32m+[m[32m```git config --global user.email 이메일``` 버전에 이메일 등록[m
[32m+[m
[32m+[m[32m```git commit``` commit 메시지에 들어갈 수 있고 거기에 버전을 등록할 수 있다[m
[32m+[m
[32m+[m[32m※ commit 하기전 꼭 add를 해줘야 함[m
[32m+[m
[32m+[m[32m```git log``` log를 확인할 수 있다[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### 변경 사항 확인[m
[32m+[m
[32m+[m[32m```git log -p``` 상세한 log를 확인할 수 있다[m
[32m+[m
[32m+[m[32m```git diff 버전ID1..버전ID2``` 버전간의 차이점을 비교[m
[32m+[m
[32m+[m[32m```git diff``` git add 하기 전과 후의 파일 내용 비교 ( 커밋하기 이전 )[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### 과거 버전으로 돌리기[m
[32m+[m
[32m+[m[32m```git reset --hard 버전ID``` 적어준 버전 ID로 돌아감[m
[32m+[m
[32m+[m[32m```git revert 버전ID``` 커밋을 취소한 내용을 새로운 버전으로 만든다[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### branch 생성[m
[32m+[m
[32m+[m[32m```git branch 브랜치이름``` branch 생성[m
[32m+[m
[32m+[m[32m```git branch``` branch list 확인[m
[32m+[m
[32m+[m[32m```git branch -d``` branch 삭제[m
[32m+[m
[32m+[m[32m```git branch -D``` branch 강제 삭제[m
[32m+[m
[32m+[m[32m```git checkout 바꿀 브랜치이름``` branch 전환[m
[32m+[m
[32m+[m[32m```git checkout -b 생성 후 바꿀 브랜치이름```  branch 생성 후 전환[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### branch 정보 확인[m
[32m+[m
[32m+[m[32m```git log 브랜치1..브랜치2``` branch 비교[m
[32m+[m
[32m+[m[32m```git diff 브랜치1..브랜치2``` branch 코드 비교[m
[32m+[m
[32m+[m[32m```git log --branches --graph --decorate --oneline```[m[41m [m
[32m+[m
[32m+[m[32m로그의 모든 브랜치 표시, 그래프 표현, 브랜치명 표시, 한줄로 표시[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m### branch 병합[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32mgit checkout A[m
[32m+[m[32mgit merge B[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mA branch로 B branch를 병합 (A ← B)[m
\ No newline at end of file[m
